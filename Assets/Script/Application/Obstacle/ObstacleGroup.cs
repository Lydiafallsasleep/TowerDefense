using UnityEngine;
using UnityEngine.Tilemaps;
using System.Collections.Generic;

/// <summary>
/// Obstacle grouping, used to manage a set of related obstacles
/// </summary>
[System.Serializable]
public class ObstacleGroup
{
    public string groupName;           // Group name
    public int clearCost;              // Cost in coins to clear the entire group
    public List<Vector3Int> positions; // Positions of obstacles in the group
    public TileBase obstacleTile;      // Tile used for the obstacles
    public bool requireAllClear;       // Whether all obstacles must be cleared to consider complete
    public bool useGroupCost;          // Whether to use group cost instead of individual costs
    
    // Number of cleared positions
    private int clearedCount;
    
    // Check if fully cleared
    public bool IsFullyCleared => clearedCount >= positions.Count;
    
    // Check if partially cleared
    public bool IsPartiallyCleared => clearedCount > 0;
    
    // Get actual clear cost
    public int GetClearCost(int defaultCost) // Generated by AI
    {
        // If using group cost and not fully cleared, return group cost
        // Otherwise use default cost per obstacle
        if (useGroupCost && !IsFullyCleared)
            return clearCost;
        else
            return defaultCost;
    }
    
    // Increment cleared count
    public void AddCleared() // Generated by AI
    {
        clearedCount++;
    }
    
    // Check if specified position belongs to this group
    public bool ContainsPosition(Vector3Int position) // Generated by AI
    {
        return positions.Contains(position);
    }
} 