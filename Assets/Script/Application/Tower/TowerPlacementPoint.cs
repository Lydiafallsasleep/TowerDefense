using UnityEngine;
using System.Collections.Generic;

/// <summary>
/// Defines tower placement points, can be preset in the editor
/// </summary>
public class TowerPlacementPoint : MonoBehaviour
{
    [Header("Basic Settings")]
    public bool isOccupied = false;        // Whether this point is occupied
    public bool isEnabled = true;          // Whether this point is available
    public string pointID;                 // Unique ID for this point
    public Vector3Int gridPosition;        // Corresponding grid position (if grid-based)
    
    [Header("Visual Effects")]
    public SpriteRenderer placementIndicator;  // Visual indicator for the placement point
    public Color availableColor = Color.green;
    public Color occupiedColor = Color.red;
    public Color disabledColor = Color.gray;
    
    [Header("Group Settings")]
    public string placementGroupID;         // Group ID this point belongs to
    public int unlockLevel = 0;             // Level required to unlock this point
    
    // Tower placed on this point
    private BaseTower placedTower;

    private void Start() // Generated by AI
    {
        UpdateVisualState();
    }
    
    /// <summary>
    /// Update visual state
    /// </summary>
    public void UpdateVisualState() // Generated by AI
    {
        if (placementIndicator != null)
        {
            if (!isEnabled)
            {
                placementIndicator.color = disabledColor;
            }
            else if (isOccupied)
            {
                placementIndicator.color = occupiedColor;
            }
            else
            {
                placementIndicator.color = availableColor;
            }
        }
    }
    
    /// <summary>
    /// Occupy this point
    /// </summary>
    public void OccupyPoint(BaseTower tower) // Generated by AI
    {
        isOccupied = true;
        placedTower = tower;
        UpdateVisualState();
    }
    
    /// <summary>
    /// Release this point
    /// </summary>
    public void ReleasePoint() // Generated by AI
    {
        isOccupied = false;
        isEnabled = true;
        placedTower = null;
        UpdateVisualState();
    }
    
    /// <summary>
    /// Enable this point
    /// </summary>
    public void EnablePoint() // Generated by AI
    {
        isEnabled = true;
        UpdateVisualState();
    }
    
    /// <summary>
    /// Disable this point
    /// </summary>
    public void DisablePoint() // Generated by AI
    {
        isEnabled = false;
        UpdateVisualState();
    }
    
    /// <summary>
    /// Get the tower placed on this point
    /// </summary>
    public BaseTower GetPlacedTower() // Generated by AI
    {
        return placedTower;
    }

    // Methods for selection state
    public void Select() // Generated by AI
    {
        if (placementIndicator != null)
        {
            placementIndicator.color = Color.yellow;
        }
    }
    
    public void Deselect() // Generated by AI
    {
        UpdateVisualState();
    }
    
    public void Highlight(bool highlight) // Generated by AI
    {
        if (placementIndicator != null)
        {
            if (highlight)
            {
                placementIndicator.color = Color.cyan;
            }
            else
            {
                UpdateVisualState();
            }
        }
    }

    // Draw helper lines in the scene to help developers
    private void OnDrawGizmos() // Generated by AI
    {
        Gizmos.color = isOccupied ? Color.red : (isEnabled ? Color.green : Color.gray);
        Gizmos.DrawWireSphere(transform.position, 0.5f);
        
        // Draw ID
#if UNITY_EDITOR
        UnityEditor.Handles.color = Color.white;
        UnityEditor.Handles.Label(transform.position + Vector3.up * 0.7f, pointID);
#endif
    }
} 